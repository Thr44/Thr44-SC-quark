CLASS:: Odef
summary:: Odef is a wrapper class for sound instatiation.

categories:: Thr44, Quarks
related:: Classes/SCPad

DESCRIPTION::
Odef is a wrapper class for sound instatiation.
It provides a general interface to control different types of objects using a common interface


definitionList::
## link::Classes/Task::s behavior  || Looping and iterating:
CODE::
(
Odef(\sinDown, {
	arg gain=1;
	25.do{
		arg i;
		{
			var sound, env;
			env=EnvGen.kr(Env.perc(0.01, (4096/44100)/(28.1-i)), doneAction:2);
			sound=SinOsc.ar(9000-(110*(i+20)), 0, 1)*env;
			Out.ar(0, sound);
		}.play;
		0.05.wait;
	}
});

Odef(\sinDown).play;
)
::
## UGen link::Classes/Function::s || Functions with UGens
CODE::
Odef(\FM, {
	arg carrier=400, mod=20, modDepth=100;
	Out.ar(0, SinOsc.ar(carrier + SinOsc.ar(mod, 0, modDepth)));
});
Odef(\FM).play;

Odef(\FM).set(\carrier, 2, \mod, 1000, \modDepth, 1000);
::
## Generic link::Classes/Function:: || Any generic function can be used. It allows setting methods of other running processes
::
CODE::
Odef(\sum, {
	arg n0, n1;
	n0+n1;
});
Odef(\sum).set(\n0, 2, \n1, 4).play;
::

Odef is a fundamental object for link::Classes/SCPad:: and link::Classes/PetriNet::.

Thanks to Alberto de Campo for all the knowledge and help provided!


CLASSMETHODS::

private::defaultServer, nodeWatcher

METHOD:: new
Return a new Odef and store it in a global IdentityDictionary under the key. If there is already an Odef there, replace its object with the new one.

argument:: key
A link::Classes/String:: or link::ClassesSymbol:: specifying the name of the Odef to use

argument:: obj
A link::Classes/Function::

argument:: registerWatcher
Will register Odef to listen when it stops playing in the server

METHOD:: all
An link::Classes/IdentityDictionary:: containing all link::Classes/Odef::s

returns:: link::Classes/IdentityDictionary::

METHOD:: clearAll
Deletes all Odefs and removes them from link::Classes/Odef#*all::

INSTANCEMETHODS::

private::network, dispatchGo, dispatchEnd, type, instanceCopies, controlMethod, valueObject, obj, objectType, registerWatcher, copyArgsToEnvir, nodeToRefObjMapping, interpretObject, result, argAssociations, refObj, envir, controls

METHOD:: play

METHOD:: stop

METHOD:: set
Set the values of one or more parameters.
CODE::
Odef(\syncSaw, {
	arg out = 0,freq = 700, sawFreq = 440.0;
        Out.ar(out, FM(freq, sawFreq, 0.1));

});

Odef(\syncSaw).play

Odef(\syncSaw).set(\freq, 400, \sawFreq, 199);

Odef(\syncSaw).stop
::

METHOD:: isPlaying
For this method to work link::Classes/Odef#*new:: registerWatcher must be set to true

returns:: link::Classes/Boolean::

METHOD:: clear
Deletes the Odef and removes it from link::Classes/Odef#*all::

METHOD:: clone
Create a new Odef and store it in link::Classes/Odef#*all:: under the key value. If there is already an Odef there, replace its object with the new one. The object is a function (see examples)

argument:: name
the key for the new cloned Odef for reference in a global IdentityDictionary

returns:: link::Classes/Odef::

METHOD:: getInstance
Create a new Odef and store it in link::Classes/Odef#*all:: under the key value.
If the parent Odef is changed, this instance will inherit its properties.
This method is useful for creating and playing multiple instances of a single Odef.

argument:: name
the key for the new child Odef for reference in link::Classes/Odef#*all::

returns:: link::Classes/Odef::

METHOD:: instanceParent
Create a new Odef and store it in link::Classes/Odef#*all:: under the key value.
If the parent Odef is changed, this instance will inherit its properties.
This method is useful for creating and playing multiple instances of a single Odef.

returns:: link::Classes/Odef::

METHOD:: key

METHOD:: args
An array with all object's arguments and values supplied.

returns:: link::Classes/Array::

METHOD:: argNames
An array with all object's argument names

returns:: link::Classes/SymbolArray::

METHOD:: argValues
An array with all object's argument values

returns:: link::Classes/Array::

METHOD:: tags
An array with all object's assigned Tags

returns:: link::Classes/Array::

METHOD:: addTag
Assign a tag to Odef

argument:: tag

returns:: link::Classes/Odef::


METHOD:: addControl
Allows setting control information to be used by external objects (see link::Classes/SCPad::)


argument:: ctype
the name to assign to control.

link::Classes/SCPad:: recognizes the following controls:
definitionList::
## Slider || requires one parameter
## circularSlider || requires one parameter
## circularRange || requires two parameters
## circularSelectSlider || requires one parameter set as link::Classes/Association:: (see above example)
## scatterXY || requires two parameters
a third optional boolean parameter can be used. If \play is used it will start/stop the Odef sound process.
## scatterRadial ||  requires two parameters
a third optional parameter can be used (will return a boolean value). It \play is used it will start/stop the Odef sound process.
## Play || requires the boolean parameter \play.
::

argument:: params
the parameters to be used by the control.
A link::Classes/ControlSpec:: must be defined for every parameter. See also link::Classes/SCPad#*loadSpecs::
code::
ControlSpec.specs[\rate] = ControlSpec(-2, 2, \linear, 0.01, 1, units: "Hz");
::


METHOD:: setControlMethod
Allows setting control method to be used by external objects

argument:: method
the name to assign to control.

SCPad recognizes the following control methods:
definitionList::
## \select || will open the UIs for the Odef
## \trig || will dispatch the Odef sound process. By press-and-holding the UIs Odef icon will display the controls.
::

returns:: link::Classes/Odef::

EXAMPLES::

code::
Odef(\scatter2, {
	arg gain=1, rate=1, density=6, rho=0.7, azimuth=0, sndbuf=GrainEnv.sinc16Env->[GrainEnv.sinc8Env, GrainEnv.sinc16Env, GrainEnv.sinc32Env, GrainEnv.exponEnv];
	inf.do({
		Synth( \controlledGrainsClient, [\sndbuf, sndbuf, \gain,  gain, \grainSize,  [ 0.05, 1], \grainPos,  [ 0, 1 ] , \rate,  [ -2, 2 ] , \azimuth,  [azimuth, azimuth] , \rho, [rho, rho] , \spaceMode,  0 , \hasFilter,  false , \rhoMode,  0 , \ffreq,  nil , \frq,  nil ]);
		(1/density).wait;
		//sndbuf.postln;
	});
});
Odef(\scatter2).addControl("circularSlider", [\gain]);
Odef(\scatter2).addControl("scatterXY", [\rate, \density]);
Odef(\scatter2).addControl("scatterRadial", [\azimuth, \rho, \spatialCtrMode]);
Odef(\scatter2).addControl("circularSelectSlider", [\sndbuf]);
::
